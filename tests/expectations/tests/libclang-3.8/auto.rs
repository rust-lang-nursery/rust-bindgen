/* automatically generated by rust-bindgen */


#![allow(dead_code, non_snake_case, non_camel_case_types, non_upper_case_globals)]


#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct Foo {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN3Foo4kFooE"]
    pub static mut Foo_kFoo: bool;
}
#[test]
fn bindgen_test_layout_Foo() {
    assert_eq!(
        ::std::mem::size_of::<Foo>(),
        1usize,
        concat!("Size of: ", stringify!(Foo))
    );
    assert_eq!(
        ::std::mem::align_of::<Foo>(),
        1usize,
        concat!("Alignment of ", stringify!(Foo))
    );
}
impl Clone for Foo {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct Bar {
    pub _address: u8,
}
impl Clone for Bar {
    fn clone(&self) -> Self {
        *self
    }
}
extern "C" {
    #[link_name = "\u{1}_Z5Test2v"]
    pub fn Test2() -> ::std::os::raw::c_uint;
}
