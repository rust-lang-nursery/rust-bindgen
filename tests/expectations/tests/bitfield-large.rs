/* automatically generated by rust-bindgen */

pub use self::root::*;

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::*;
    #[repr(C)]
    #[derive(Debug, Default, Copy)]
    pub struct HasBigBitfield {
        pub _bitfield_1: [u8; 16usize],
    }
    #[test]
    fn bindgen_test_layout_HasBigBitfield() {
        assert_eq!(::std::mem::size_of::<HasBigBitfield>() , 16usize , concat
                   ! ( "Size of: " , stringify ! ( HasBigBitfield ) ));
    }
    impl Clone for HasBigBitfield {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy)]
    pub struct HasTwoBigBitfields {
        pub _bitfield_1: [u8; 16usize],
    }
    #[test]
    fn bindgen_test_layout_HasTwoBigBitfields() {
        assert_eq!(::std::mem::size_of::<HasTwoBigBitfields>() , 16usize ,
                   concat ! ( "Size of: " , stringify ! ( HasTwoBigBitfields )
                   ));
    }
    impl Clone for HasTwoBigBitfields {
        fn clone(&self) -> Self { *self }
    }
}
