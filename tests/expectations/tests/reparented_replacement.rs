/* automatically generated by rust-bindgen */


#![allow(non_snake_case)]


#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub mod foo {
        #[allow(unused_imports)]
        use self::super::super::root;
        /// <div rustbindgen replaces="foo::Bar"></div>
        #[repr(C)]
        #[derive(Debug, Default, Copy)]
        pub struct Bar {
            pub bazz: ::std::os::raw::c_int,
        }
        #[test]
        fn bindgen_test_layout_Bar() {
            assert_eq!(::std::mem::size_of::<Bar>() , 4usize , concat ! (
                       "Size of: " , stringify ! ( Bar ) ));
            assert_eq! (::std::mem::align_of::<Bar>() , 4usize , concat ! (
                        "Alignment of " , stringify ! ( Bar ) ));
            assert_eq! (unsafe {
                        & ( * ( 0 as * const Bar ) ) . bazz as * const _ as
                        usize } , 0usize , concat ! (
                        "Alignment of field: " , stringify ! ( Bar ) , "::" ,
                        stringify ! ( bazz ) ));
        }
        impl Clone for Bar {
            fn clone(&self) -> Self { *self }
        }
    }
    pub type ReferencesBar = root::foo::Bar;
}
