/* automatically generated by rust-bindgen */

pub use self::root::*;

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::*;
    pub const Foo_Bar: Foo = Foo(2);
    pub const Foo_Baz: Foo = Foo(4);
    pub const Foo_Duplicated: Foo = Foo(4);
    pub const Foo_Negative: Foo = Foo(-3);
    impl ::std::ops::BitOr<Foo> for Foo {
        type
        Output
        =
        Self;
        #[inline]
        fn bitor(self, other: Self) -> Self { Foo(self.0 | other.0) }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub struct Foo(pub ::std::os::raw::c_int);
    pub const Buz_Bar: Buz = Buz(2);
    pub const Buz_Baz: Buz = Buz(4);
    pub const Buz_Duplicated: Buz = Buz(4);
    pub const Buz_Negative: Buz = Buz(-3);
    impl ::std::ops::BitOr<Buz> for Buz {
        type
        Output
        =
        Self;
        #[inline]
        fn bitor(self, other: Self) -> Self { Buz(self.0 | other.0) }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub struct Buz(pub ::std::os::raw::c_schar);
    pub const NS_FOO: _bindgen_ty_1 = _bindgen_ty_1(1);
    pub const NS_BAR: _bindgen_ty_1 = _bindgen_ty_1(2);
    impl ::std::ops::BitOr<_bindgen_ty_1> for _bindgen_ty_1 {
        type
        Output
        =
        Self;
        #[inline]
        fn bitor(self, other: Self) -> Self {
            _bindgen_ty_1(self.0 | other.0)
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub struct _bindgen_ty_1(pub ::std::os::raw::c_uint);
    #[repr(C)]
    #[derive(Debug, Default, Copy)]
    pub struct Dummy {
        pub _address: u8,
    }
    pub const Dummy_DUMMY_FOO: Dummy__bindgen_ty_1 = Dummy__bindgen_ty_1(1);
    pub const Dummy_DUMMY_BAR: Dummy__bindgen_ty_1 = Dummy__bindgen_ty_1(2);
    impl ::std::ops::BitOr<Dummy__bindgen_ty_1> for Dummy__bindgen_ty_1 {
        type
        Output
        =
        Self;
        #[inline]
        fn bitor(self, other: Self) -> Self {
            Dummy__bindgen_ty_1(self.0 | other.0)
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    pub struct Dummy__bindgen_ty_1(pub ::std::os::raw::c_uint);
    #[test]
    fn bindgen_test_layout_Dummy() {
        assert_eq!(::std::mem::size_of::<Dummy>() , 1usize , concat ! (
                   "Size of: " , stringify ! ( Dummy ) ));
        assert_eq! (::std::mem::align_of::<Dummy>() , 1usize , concat ! (
                    "Alignment of " , stringify ! ( Dummy ) ));
    }
    impl Clone for Dummy {
        fn clone(&self) -> Self { *self }
    }
}
