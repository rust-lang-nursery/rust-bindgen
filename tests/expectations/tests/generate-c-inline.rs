/* automatically generated by rust-bindgen */

#![allow(
    dead_code,
    non_snake_case,
    non_camel_case_types,
    non_upper_case_globals
)]

#[doc(hidden)]
macro_rules ! c { ( ) => { } ; ( # include $ filename : tt $ ( $ rest : tt ) * ) => { c ! { $ ( $ rest ) * } } ; ( { $ ( $ code : tt ) * } $ ( $ rest : tt ) * ) => { c ! { $ ( $ rest ) * } } ; }
c! { # include "generate-c-inline.h" }
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct state_t {
    pub foo: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_state_t() {
    assert_eq!(
        ::std::mem::size_of::<state_t>(),
        4usize,
        concat!("Size of: ", stringify!(state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<state_t>(),
        4usize,
        concat!("Alignment of ", stringify!(state_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<state_t>())).foo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(state_t),
            "::",
            stringify!(foo)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__inlined_state"]
    pub fn state(s: *mut state_t) -> state_t;
}
c! { { state_t __inlined_state ( state_t * s ) { return state ( s ) ; } } }
extern "C" {
    #[link_name = "\u{1}__inlined_foo"]
    pub fn foo(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
c! { { int __inlined_foo ( const int x , const int y ) { return foo ( x , y ) ; } } }
extern "C" {
    #[link_name = "\u{1}__inlined_nop"]
    pub fn nop();
}
c! { { void __inlined_nop ( ) { nop ( ) ; } } }
