/* automatically generated by rust-bindgen */

pub use self::root::*;

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
    #[repr(C)]
    pub struct __BindgenComplex<T> {
        pub re: T,
        pub im: T,
    }
    #[allow(unused_imports)]
    use self::super::*;
    #[repr(C)]
    #[derive(Debug, Default, Copy)]
    pub struct TestDouble {
        pub mMember: __BindgenComplex<f64>,
    }
    #[test]
    fn bindgen_test_layout_TestDouble() {
        assert_eq!(::std::mem::size_of::<TestDouble>() , 16usize , concat ! (
                   "Size of: " , stringify ! ( TestDouble ) ));
        assert_eq! (::std::mem::align_of::<TestDouble>() , 8usize , concat ! (
                    "Alignment of " , stringify ! ( TestDouble ) ));
        assert_eq! (unsafe {
                    & ( * ( 0 as * const TestDouble ) ) . mMember as * const _
                    as usize } , 0usize , concat ! (
                    "Alignment of field: " , stringify ! ( TestDouble ) , "::"
                    , stringify ! ( mMember ) ));
    }
    impl Clone for TestDouble {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct TestDoublePtr {
        pub mMember: *mut __BindgenComplex<f64>,
    }
    #[test]
    fn bindgen_test_layout_TestDoublePtr() {
        assert_eq!(::std::mem::size_of::<TestDoublePtr>() , 8usize , concat !
                   ( "Size of: " , stringify ! ( TestDoublePtr ) ));
        assert_eq! (::std::mem::align_of::<TestDoublePtr>() , 8usize , concat
                    ! ( "Alignment of " , stringify ! ( TestDoublePtr ) ));
        assert_eq! (unsafe {
                    & ( * ( 0 as * const TestDoublePtr ) ) . mMember as *
                    const _ as usize } , 0usize , concat ! (
                    "Alignment of field: " , stringify ! ( TestDoublePtr ) ,
                    "::" , stringify ! ( mMember ) ));
    }
    impl Clone for TestDoublePtr {
        fn clone(&self) -> Self { *self }
    }
    impl Default for TestDoublePtr {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy)]
    pub struct TestFloat {
        pub mMember: __BindgenComplex<f32>,
    }
    #[test]
    fn bindgen_test_layout_TestFloat() {
        assert_eq!(::std::mem::size_of::<TestFloat>() , 8usize , concat ! (
                   "Size of: " , stringify ! ( TestFloat ) ));
        assert_eq! (::std::mem::align_of::<TestFloat>() , 4usize , concat ! (
                    "Alignment of " , stringify ! ( TestFloat ) ));
        assert_eq! (unsafe {
                    & ( * ( 0 as * const TestFloat ) ) . mMember as * const _
                    as usize } , 0usize , concat ! (
                    "Alignment of field: " , stringify ! ( TestFloat ) , "::"
                    , stringify ! ( mMember ) ));
    }
    impl Clone for TestFloat {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct TestFloatPtr {
        pub mMember: *mut __BindgenComplex<f32>,
    }
    #[test]
    fn bindgen_test_layout_TestFloatPtr() {
        assert_eq!(::std::mem::size_of::<TestFloatPtr>() , 8usize , concat ! (
                   "Size of: " , stringify ! ( TestFloatPtr ) ));
        assert_eq! (::std::mem::align_of::<TestFloatPtr>() , 8usize , concat !
                    ( "Alignment of " , stringify ! ( TestFloatPtr ) ));
        assert_eq! (unsafe {
                    & ( * ( 0 as * const TestFloatPtr ) ) . mMember as * const
                    _ as usize } , 0usize , concat ! (
                    "Alignment of field: " , stringify ! ( TestFloatPtr ) ,
                    "::" , stringify ! ( mMember ) ));
    }
    impl Clone for TestFloatPtr {
        fn clone(&self) -> Self { *self }
    }
    impl Default for TestFloatPtr {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
}
