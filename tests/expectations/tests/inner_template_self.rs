/* automatically generated by rust-bindgen */

pub use self::root::*;

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::*;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct LinkedList {
        pub next: *mut LinkedList,
        pub prev: *mut LinkedList,
    }
    impl Default for LinkedList {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Debug, Copy)]
    pub struct InstantiateIt {
        pub m_list: LinkedList,
    }
    #[test]
    fn bindgen_test_layout_InstantiateIt() {
        assert_eq!(::std::mem::size_of::<InstantiateIt>() , 16usize , concat !
                   ( "Size of: " , stringify ! ( InstantiateIt ) ));
        assert_eq! (::std::mem::align_of::<InstantiateIt>() , 8usize , concat
                    ! ( "Alignment of " , stringify ! ( InstantiateIt ) ));
        assert_eq! (unsafe {
                    & ( * ( 0 as * const InstantiateIt ) ) . m_list as * const
                    _ as usize } , 0usize , concat ! (
                    "Alignment of field: " , stringify ! ( InstantiateIt ) ,
                    "::" , stringify ! ( m_list ) ));
    }
    impl Clone for InstantiateIt {
        fn clone(&self) -> Self { *self }
    }
    impl Default for InstantiateIt {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
}
