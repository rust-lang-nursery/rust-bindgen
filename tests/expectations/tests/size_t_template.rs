/* automatically generated by rust-bindgen */

pub use self::root::*;

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::*;
    #[repr(C)]
    pub struct C {
        pub arr: [u32; 3usize],
    }
    #[test]
    fn bindgen_test_layout_C() {
        assert_eq!(::std::mem::size_of::<C>() , 12usize , concat ! (
                   "Size of: " , stringify ! ( C ) ));
        assert_eq! (::std::mem::align_of::<C>() , 4usize , concat ! (
                    "Alignment of " , stringify ! ( C ) ));
        assert_eq! (unsafe {
                    & ( * ( 0 as * const C ) ) . arr as * const _ as usize } ,
                    0usize , concat ! (
                    "Alignment of field: " , stringify ! ( C ) , "::" ,
                    stringify ! ( arr ) ));
    }
    impl Default for C {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
}
