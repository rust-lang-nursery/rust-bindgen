/* automatically generated by rust-bindgen */

pub use self::root::*;

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::*;
    #[repr(C)]
    #[derive(Debug, Default, Copy)]
    pub struct MyClass {
        pub _address: u8,
    }
    extern "C" {
        #[link_name = "_ZN7MyClass7exampleE"]
        pub static mut MyClass_example: *const ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "_ZN7MyClass26example_check_no_collisionE"]
        pub static mut MyClass_example_check_no_collision:
                   *const ::std::os::raw::c_int;
    }
    #[test]
    fn bindgen_test_layout_MyClass() {
        assert_eq!(::std::mem::size_of::<MyClass>() , 1usize , concat ! (
                   "Size of: " , stringify ! ( MyClass ) ));
        assert_eq! (::std::mem::align_of::<MyClass>() , 1usize , concat ! (
                    "Alignment of " , stringify ! ( MyClass ) ));
    }
    impl Clone for MyClass {
        fn clone(&self) -> Self { *self }
    }
    extern "C" {
        #[link_name = "_ZL26example_check_no_collision"]
        pub static mut example_check_no_collision:
                   *const ::std::os::raw::c_int;
    }
}
