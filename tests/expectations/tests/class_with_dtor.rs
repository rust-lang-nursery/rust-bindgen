/* automatically generated by rust-bindgen */

pub use self::root::*;

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::*;
    #[repr(C)]
    #[derive(Debug)]
    pub struct HandleWithDtor<T> {
        pub ptr: *mut T,
    }
    impl <T> Default for HandleWithDtor<T> {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type HandleValue = HandleWithDtor<::std::os::raw::c_int>;
    #[repr(C)]
    #[derive(Debug)]
    pub struct WithoutDtor {
        pub shouldBeWithDtor: HandleValue,
    }
    #[test]
    fn bindgen_test_layout_WithoutDtor() {
        assert_eq!(::std::mem::size_of::<WithoutDtor>() , 8usize , concat ! (
                   "Size of: " , stringify ! ( WithoutDtor ) ));
        assert_eq! (::std::mem::align_of::<WithoutDtor>() , 8usize , concat !
                    ( "Alignment of " , stringify ! ( WithoutDtor ) ));
        assert_eq! (unsafe {
                    & ( * ( 0 as * const WithoutDtor ) ) . shouldBeWithDtor as
                    * const _ as usize } , 0usize , concat ! (
                    "Alignment of field: " , stringify ! ( WithoutDtor ) ,
                    "::" , stringify ! ( shouldBeWithDtor ) ));
    }
    impl Default for WithoutDtor {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[test]
    fn __bindgen_test_layout_HandleWithDtor_instantiation_11() {
        assert_eq!(::std::mem::size_of::<HandleWithDtor<::std::os::raw::c_int>>()
                   , 8usize , concat ! (
                   "Size of template specialization: " , stringify ! (
                   HandleWithDtor<::std::os::raw::c_int> ) ));
        assert_eq!(::std::mem::align_of::<HandleWithDtor<::std::os::raw::c_int>>()
                   , 8usize , concat ! (
                   "Alignment of template specialization: " , stringify ! (
                   HandleWithDtor<::std::os::raw::c_int> ) ));
    }
}
