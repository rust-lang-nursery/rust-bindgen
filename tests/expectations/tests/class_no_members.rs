/* automatically generated by rust-bindgen */

pub use self::root::*;

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::*;
    #[repr(C)]
    #[derive(Debug, Default, Copy)]
    pub struct whatever {
        pub _address: u8,
    }
    #[test]
    fn bindgen_test_layout_whatever() {
        assert_eq!(::std::mem::size_of::<whatever>() , 1usize , concat ! (
                   "Size of: " , stringify ! ( whatever ) ));
        assert_eq! (::std::mem::align_of::<whatever>() , 1usize , concat ! (
                    "Alignment of " , stringify ! ( whatever ) ));
    }
    impl Clone for whatever {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy)]
    pub struct whatever_child {
        pub _address: u8,
    }
    #[test]
    fn bindgen_test_layout_whatever_child() {
        assert_eq!(::std::mem::size_of::<whatever_child>() , 1usize , concat !
                   ( "Size of: " , stringify ! ( whatever_child ) ));
        assert_eq! (::std::mem::align_of::<whatever_child>() , 1usize , concat
                    ! ( "Alignment of " , stringify ! ( whatever_child ) ));
    }
    impl Clone for whatever_child {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy)]
    pub struct whatever_child_with_member {
        pub m_member: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_whatever_child_with_member() {
        assert_eq!(::std::mem::size_of::<whatever_child_with_member>() ,
                   4usize , concat ! (
                   "Size of: " , stringify ! ( whatever_child_with_member )
                   ));
        assert_eq! (::std::mem::align_of::<whatever_child_with_member>() ,
                    4usize , concat ! (
                    "Alignment of " , stringify ! ( whatever_child_with_member
                    ) ));
        assert_eq! (unsafe {
                    & ( * ( 0 as * const whatever_child_with_member ) ) .
                    m_member as * const _ as usize } , 0usize , concat ! (
                    "Alignment of field: " , stringify ! (
                    whatever_child_with_member ) , "::" , stringify ! (
                    m_member ) ));
    }
    impl Clone for whatever_child_with_member {
        fn clone(&self) -> Self { *self }
    }
}
