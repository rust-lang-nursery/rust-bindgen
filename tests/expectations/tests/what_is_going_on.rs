/* automatically generated by rust-bindgen */

pub use self::root::*;

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::*;
    #[repr(C)]
    #[derive(Debug, Default, Copy)]
    pub struct UnknownUnits {
        pub _address: u8,
    }
    #[test]
    fn bindgen_test_layout_UnknownUnits() {
        assert_eq!(::std::mem::size_of::<UnknownUnits>() , 1usize , concat ! (
                   "Size of: " , stringify ! ( UnknownUnits ) ));
        assert_eq! (::std::mem::align_of::<UnknownUnits>() , 1usize , concat !
                    ( "Alignment of " , stringify ! ( UnknownUnits ) ));
    }
    impl Clone for UnknownUnits {
        fn clone(&self) -> Self { *self }
    }
    pub type Float = f32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PointTyped<F> {
        pub x: F,
        pub y: F,
    }
    impl <F> Default for PointTyped<F> {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type IntPoint = PointTyped<f32>;
}
