/* automatically generated by rust-bindgen */


#![allow(dead_code, non_snake_case, non_camel_case_types, non_upper_case_globals)]


pub type my_fun_t = ::std::option::Option<
    unsafe extern "C" fn(
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
    ),
>;
#[repr(C)]
#[derive(Copy)]
pub struct Foo {
    pub callback: my_fun_t,
}
#[test]
fn bindgen_test_layout_Foo() {
    assert_eq!(
        ::std::mem::size_of::<Foo>(),
        8usize,
        concat!("Size of: ", stringify!(Foo))
    );
    assert_eq!(
        ::std::mem::align_of::<Foo>(),
        8usize,
        concat!("Alignment of ", stringify!(Foo))
    );
    assert_eq!(
        unsafe { &(*(0 as *const Foo)).callback as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(Foo),
            "::",
            stringify!(callback)
        )
    );
}
impl Clone for Foo {
    fn clone(&self) -> Self {
        *self
    }
}
impl Default for Foo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type my_fun2_t = ::std::option::Option<
    unsafe extern "C" fn(
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
        _: ::std::os::raw::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Hash, PartialEq, Eq)]
pub struct Bar {
    pub callback: my_fun2_t,
}
#[test]
fn bindgen_test_layout_Bar() {
    assert_eq!(
        ::std::mem::size_of::<Bar>(),
        8usize,
        concat!("Size of: ", stringify!(Bar))
    );
    assert_eq!(
        ::std::mem::align_of::<Bar>(),
        8usize,
        concat!("Alignment of ", stringify!(Bar))
    );
    assert_eq!(
        unsafe { &(*(0 as *const Bar)).callback as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(Bar),
            "::",
            stringify!(callback)
        )
    );
}
impl Clone for Bar {
    fn clone(&self) -> Self {
        *self
    }
}
impl Default for Bar {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
