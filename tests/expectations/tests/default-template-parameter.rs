/* automatically generated by rust-bindgen */

pub use self::root::*;

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::*;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Foo<T, U> {
        pub t: T,
        pub u: U,
    }
    impl <T, U> Default for Foo<T, U> {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[test]
    fn __bindgen_test_layout_Foo_instantiation_7() {
        assert_eq!(::std::mem::size_of::<Foo<bool, ::std::os::raw::c_int>>() ,
                   8usize , concat ! (
                   "Size of template specialization: " , stringify ! (
                   Foo<bool, ::std::os::raw::c_int> ) ));
        assert_eq!(::std::mem::align_of::<Foo<bool, ::std::os::raw::c_int>>()
                   , 4usize , concat ! (
                   "Alignment of template specialization: " , stringify ! (
                   Foo<bool, ::std::os::raw::c_int> ) ));
    }
    extern "C" {
        #[link_name = "_ZL3bar"]
        pub static mut bar: Foo<bool, ::std::os::raw::c_int>;
    }
}
