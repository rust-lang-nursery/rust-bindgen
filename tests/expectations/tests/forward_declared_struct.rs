/* automatically generated by rust-bindgen */

pub use self::root::*;

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::*;
    #[repr(C)]
    #[derive(Debug, Default, Copy)]
    pub struct a {
        pub b: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_a() {
        assert_eq!(::std::mem::size_of::<a>() , 4usize , concat ! (
                   "Size of: " , stringify ! ( a ) ));
        assert_eq! (::std::mem::align_of::<a>() , 4usize , concat ! (
                    "Alignment of " , stringify ! ( a ) ));
        assert_eq! (unsafe {
                    & ( * ( 0 as * const a ) ) . b as * const _ as usize } ,
                    0usize , concat ! (
                    "Alignment of field: " , stringify ! ( a ) , "::" ,
                    stringify ! ( b ) ));
    }
    impl Clone for a {
        fn clone(&self) -> Self { *self }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy)]
    pub struct c {
        pub d: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_c() {
        assert_eq!(::std::mem::size_of::<c>() , 4usize , concat ! (
                   "Size of: " , stringify ! ( c ) ));
        assert_eq! (::std::mem::align_of::<c>() , 4usize , concat ! (
                    "Alignment of " , stringify ! ( c ) ));
        assert_eq! (unsafe {
                    & ( * ( 0 as * const c ) ) . d as * const _ as usize } ,
                    0usize , concat ! (
                    "Alignment of field: " , stringify ! ( c ) , "::" ,
                    stringify ! ( d ) ));
    }
    impl Clone for c {
        fn clone(&self) -> Self { *self }
    }
}
