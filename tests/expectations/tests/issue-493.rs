/* automatically generated by rust-bindgen */


#![allow(dead_code, non_snake_case, non_camel_case_types, non_upper_case_globals)]


#[repr(C)]
#[derive(Debug, Default, Copy, Hash, PartialEq, Eq)]
pub struct basic_string {
    pub _address: u8,
}
pub type basic_string_size_type = ::std::os::raw::c_ulonglong;
pub type basic_string_value_type = ::std::os::raw::c_char;
pub type basic_string_pointer = *mut basic_string_value_type;
#[repr(C)]
#[derive(Debug, Copy, Hash, PartialEq, Eq)]
pub struct basic_string___long {
    pub __cap_: basic_string_size_type,
    pub __size_: basic_string_size_type,
    pub __data_: basic_string_pointer,
}
impl Clone for basic_string___long {
    fn clone(&self) -> Self {
        *self
    }
}
impl Default for basic_string___long {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const basic_string___min_cap: basic_string__bindgen_ty_1 =
    basic_string__bindgen_ty_1::__min_cap;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum basic_string__bindgen_ty_1 {
    __min_cap = 0,
}
#[repr(C)]
#[derive(Copy)]
pub struct basic_string___short {
    pub __bindgen_anon_1: basic_string___short__bindgen_ty_1,
    pub __data_: *mut basic_string_value_type,
}
#[repr(C)]
#[derive(Copy)]
pub union basic_string___short__bindgen_ty_1 {
    pub __size_: ::std::os::raw::c_uchar,
    pub __lx: basic_string_value_type,
    _bindgen_union_align: u8,
}
#[test]
fn bindgen_test_layout_basic_string___short__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<basic_string___short__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(basic_string___short__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<basic_string___short__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(basic_string___short__bindgen_ty_1)
        )
    );
}
impl Clone for basic_string___short__bindgen_ty_1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl Default for basic_string___short__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl Clone for basic_string___short {
    fn clone(&self) -> Self {
        *self
    }
}
impl Default for basic_string___short {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub union basic_string___ulx {
    pub __lx: basic_string___long,
    pub __lxx: basic_string___short,
    _bindgen_union_align: [u8; 0usize],
}
#[test]
fn bindgen_test_layout_basic_string___ulx() {
    assert_eq!(
        ::std::mem::size_of::<basic_string___ulx>(),
        0usize,
        concat!("Size of: ", stringify!(basic_string___ulx))
    );
    assert_eq!(
        ::std::mem::align_of::<basic_string___ulx>(),
        0usize,
        concat!("Alignment of ", stringify!(basic_string___ulx))
    );
}
impl Clone for basic_string___ulx {
    fn clone(&self) -> Self {
        *self
    }
}
impl Default for basic_string___ulx {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const basic_string___n_words: basic_string__bindgen_ty_2 =
    basic_string__bindgen_ty_2::__n_words;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum basic_string__bindgen_ty_2 {
    __n_words = 0,
}
#[repr(C)]
#[derive(Debug, Copy, Hash, PartialEq, Eq)]
pub struct basic_string___raw {
    pub __words: *mut basic_string_size_type,
}
impl Clone for basic_string___raw {
    fn clone(&self) -> Self {
        *self
    }
}
impl Default for basic_string___raw {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct basic_string___rep {
    pub __bindgen_anon_1: basic_string___rep__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union basic_string___rep__bindgen_ty_1 {
    pub __l: basic_string___long,
    pub __s: basic_string___short,
    pub __r: basic_string___raw,
    _bindgen_union_align: [u8; 0usize],
}
#[test]
fn bindgen_test_layout_basic_string___rep__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<basic_string___rep__bindgen_ty_1>(),
        0usize,
        concat!("Size of: ", stringify!(basic_string___rep__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<basic_string___rep__bindgen_ty_1>(),
        0usize,
        concat!(
            "Alignment of ",
            stringify!(basic_string___rep__bindgen_ty_1)
        )
    );
}
impl Clone for basic_string___rep__bindgen_ty_1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl Default for basic_string___rep__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl Clone for basic_string___rep {
    fn clone(&self) -> Self {
        *self
    }
}
impl Default for basic_string___rep {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl Clone for basic_string {
    fn clone(&self) -> Self {
        *self
    }
}
