/* automatically generated by rust-bindgen */


#![allow(non_snake_case)]


pub const RTE_CACHE_LINE_SIZE: ::std::os::raw::c_uint = 64;
#[doc = "__attribute__(aligned(16))"]
pub const x: ::std::os::raw::c_int = 0;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct foo {
    #[deprecated]
    #[doc = "__attribute__(aligned(8))"]
    #[allow(dead_code)]
    pub x: [::std::os::raw::c_int; 2usize],
}
impl Clone for foo {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[deprecated]
    #[link_name = "old_var"]
    pub static mut old_var: ::std::os::raw::c_int;
}
#[repr(u32)]
#[allow(dead_code)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum E { oldval = 0, newval = 1, }
extern "C" {
    #[link_name = "foo"]
    pub static mut foo: [::std::os::raw::c_int; 4usize];
}
extern "C" {
    #[cold]
    #[deprecated]
    #[link_name = "_Z6old_fnv"]
    pub fn old_fn() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "__attribute__(format(printf,2,3))"]
    #[link_name = "_Z9my_printfPvPKcz"]
    pub fn my_printf(my_object: *mut ::std::os::raw::c_void,
                     my_format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_Z5fatalv"]
    pub fn fatal();
}
/**
 * The generic rte_mbuf, containing a packet mbuf.
 */
#[doc = "__attribute__(__aligned__(a))"]
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rte_mbuf {
    /** Timesync flags for use with IEEE1588. */
    pub timesync: u16,
}
impl Clone for rte_mbuf {
    fn clone(&self) -> Self { *self }
}
/**
 * Physical memory segment descriptor.
 */
#[repr(C, packed)]
#[derive(Debug, Copy)]
pub struct rte_memseg {
    /**< Number of channels. */
    pub nchannel: u32,
    /**< Number of ranks. */
    pub nrank: u32,
}
#[test]
fn bindgen_test_layout_rte_memseg() {
    assert_eq!(::std::mem::size_of::<rte_memseg>() , 8usize);
    assert_eq!(::std::mem::align_of::<rte_memseg>() , 1usize);
}
impl Clone for rte_memseg {
    fn clone(&self) -> Self { *self }
}
#[doc = "__attribute__(aligned(2*sizeof(longlong)))"]
#[repr(C)]
#[derive(Debug, Copy)]
pub struct align {
    pub foo: ::std::os::raw::c_int,
}
impl Clone for align {
    fn clone(&self) -> Self { *self }
}
